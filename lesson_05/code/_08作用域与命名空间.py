# a = 10
def demo1():
	for index in range(5):
		def fn():
			print(a)
			return index
	return fn

	# 当使用一个变量时，优先在当前作用域中寻找，如果找到就使用，如果没有则会在上一级中寻找，
	# 如果找到就使用，如果没有就继续到上一级作用于寻找,以此类推，直到找到全局作用域，
	# 如果全局作用域没有则会抛出异常

# ================================================================================
def demo2():
	global a
	a = 20
	print("a=",a)

demo2()
print("a=",a)

# 一般情况下，函数内部不能直接修改外部的变量的值，如果希望修改，则需要使用关键字声明该作用于的范围再做修改

# =================================================================================

def demo3():
	a = 10
	b = False
	c = 'Python'
	print(locals())
	print(globals())


demo3()
print(locals())
# 命名空间指的是变量存储的位置，每一个变量都需要存储到指定的命名空间中
# 每一个作用域都会有一个它对应的命名空间
# 命名空间实际上就是一个字典，是一个专门用来存储变量的字典
# locals()用来获取当前作用域的命名空间
# globals() 用来获取全局作用域的命名空间

# =====================================================================================

scope = locals()
scope['p'] = 'python'
print("p=",p)

# 向全局命名空间的字典中添加一个key-value就相当于在全局作用域中定义了一个新的变量

# =======================================================================================

def demo4():
	scope = locals()
	scope['j'] = 'Java'
	print("j=",j)

demo4()
